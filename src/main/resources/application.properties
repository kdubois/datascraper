quarkus.log.level=INFO

# url of website to scrape
bruvax.url=https://bruvax.brussels.doctena.be/

# current year (overridden by config map)
bruvax.year=20
# String to search for in the result
bruvax.search.string=Toutes les personnes Ã  partir de 
# Number of characters to extract the year
bruvax.search.yearlen=2

# Telegram Chat Id (overriden by k8s secret)
chatid=0
# Telegram Token (overridden by k8s secret)
token=0

# trust certs for demo app - set to false if you have proper certs
quarkus.kubernetes-client.trust-certs=true
# base image for s2i build
#quarkus.s2i.base-jvm-image=registry.access.redhat.com/ubi8/openjdk-11
# where to push the built image (in this case, the internal openshift registry)
quarkus.container-image.registry=quay.io
quarkus.container-image.group=kevindubois
quarkus.container-image.name=datascraper
quarkus.container-image.build=true

quarkus.native.container-runtime=podman
quarkus.native.additional-build-args =-H:ReflectionConfigurationFiles=reflection-config.json

#quarkus.openshift.build-strategy=docker
# build as a native image
quarkus.native.container-build=true
quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.2-java11
# deploy as serverless knative image that can scale to 0 so we don't use resources when the route's not running
# quarkus.kubernetes.deployment-target=knative
# quarkus.kubernetes-client.namespace=datascraper

# # When we're deploying on openshift 'prod', use config map 'bruvaxyear' to get the current year
# %prod.quarkus.kubernetes-config.enabled=true
quarkus.kubernetes-config.config-maps=bruvaxyear
# # Get telegram credentials from a 'telegram' secret
# %prod.quarkus.kubernetes-config.namespace=datascraper
# %prod.quarkus.kubernetes-config.secrets.enabled=true
# %prod.quarkus.kubernetes-config.secrets=telegram


